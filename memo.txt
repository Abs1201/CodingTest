#define ll long long
const int mxN = 1e5;

set -> distinct
이거 이진트리형태이고, 알아서 정렬되므로 append가 아닌 insert임.
set<array<int,2>> s;
s.insert({1,2});
s.lower_bound(2); return beq 2;

map
이건 레드블랙_이진트리, 알아서 정렬됨 -> insert();
if(mp.find(x-a)!=mp.end()){
    ~~
    return 0;
}

find(v.begin(), v.end(), value);
이거는 <algorightm.h>의 find.
map.find(value)
이거는 <map.h>의 find 
애초에 map은 범위가 정해지지 않음. 그래서 따로 잇다.  


sort(pointer, pointer) // 정적배열
sort(iterator, iterator) // array<>..
ex) a[mxN], b[mxN]
sort(a, a+n);

array vs vector : 이거때메 따로 정적이나 동적할당으로 배열 잘 안쓰는듯.
array길이는 미리 정해져야함. ex) array<int, 2> ar; (o)
                                array<int, n> ar; (x)
즉, append 불가.
Function)
    ar.at(1) = 5;
    ar.size(); // sizeof 이건 일반 배열.
    <algorithm> library로
    sort(ar.begin(), ar.end()) 오름차순
    sort(ar.rbegin(), ar.rend()) 내림차순

sort(str.begin(), str.end(), std::greater<int>());


if (str.find(c) != std::string::npos) {
        std::cout << "Character found" << std::endl;
    } else {
        std::cout << "Character not found" << std::endl;
    }

240417++==============================================================
set, multiset 차이: multiset은 key값 중복가능.
Towers_geek.cpp -> multiset과 upper_bound()의 힘.

map<ll, ll>  // set<pair<int,int>> 같은거 iterator->first, iterator->second 가능.

map<>은 set<>처럼 트리형태라 sort가 됨.
정렬이 필요없다면 unordered_map<>이 속도면에서는 좋음.
그리고, 트리구조로 되있는 것들은 정렬이 되어있어서 그런지 upper_bound, lower_bound가 탑재됨.
또한, 자료 넣을때 .insert() 반면 vector는 
예시로, vector는 upper_bound,lower_bound가 없음.


자주쓰는거)
    array 구조) .
        vector<> // .push_back()
        array<> // vector와 다른점: 배열길이 컴파일탐에 정해짐. 길이필요. 그래서 push_back자체가 없음.
    tree 구조) .insert() .upper_bound, lower_bound()
        set<>
        multiset<> -- 앞으로 자주쓸듯.
        map<>
    
    deque

전반적인 함수)
    .erase() // array는 없음.


잘 안쓰는듯?)
list<>
unordered_map<>
pair<> // make_pair({1,2});

queue,stack은 iterator를 지원하지않음 -> 큐의 경유, 선입선출(FIFO)의 특성을 제공하기 위해 일부 연산만을 공개하고, 이러한 연산은 일반적으로 큐의 앞과 뒤에서만 발생합니다. 그 결과, 큐의 중간에 있는 요소에 직접적으로 접근하는 것이 의미가 없기 때문에 반복자를 제공하지 않는 것이죠.